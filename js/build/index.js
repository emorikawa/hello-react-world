(function() {
  var Comment, CommentBox, CommentForm, CommentList, comments_json_response, converter;

  console.log("Hello World");

  comments_json_response = [
    {
      author: "Evan Morikawa",
      text: "Check out this [awesome site](http://inboxapp.com)"
    }, {
      author: "Michael Grinich",
      text: "*Sweet* stuff"
    }
  ];

  converter = new Showdown.converter();

  Comment = React.createClass({
    render: function() {
      var raw_post;
      raw_post = converter.makeHtml(this.props.children.toString());
      return React.createElement(React.DOM.div, {
        "className": "comment"
      }, React.createElement(React.DOM.h2, {
        "className": "commentAuthor"
      }, this.props.author), React.createElement(React.DOM.span, {
        "dangerouslySetInnerHTML": {
          __html: raw_post
        }
      }));
    }
  });

  CommentList = React.createClass({
    render: function() {
      var comment_nodes;
      comment_nodes = this.props.data_from_props.map(function(comment) {
        return React.createElement(Comment, {
          "author": comment.author
        }, comment.text);
      });
      return React.createElement(React.DOM.div, {
        "className": "commentList"
      }, comment_nodes);
    }
  });

  CommentForm = React.createClass({
    render: function() {
      return React.createElement(React.DOM.div, {
        "className": "commentForm"
      }, "Hello, world! I am a CommentForm.");
    }
  });

  CommentBox = React.createClass({
    getInitialState: function() {
      return {
        my_data_var: []
      };
    },
    componentDidMount: function() {
      return setTimeout((function(_this) {
        return function() {
          return _this.setState({
            my_data_var: comments_json_response
          });
        };
      })(this), 500);
    },
    render: function() {
      return React.createElement(React.DOM.div, {
        "className": "commentBox"
      }, React.createElement(React.DOM.h1, null, "Comments!!!"), React.createElement(CommentList, {
        "data_from_props": this.state.my_data_var
      }), React.createElement(CommentForm, null));
    }
  });

  React.renderComponent(React.createElement(CommentBox, {
    "url": "comments.json"
  }), document.getElementById('app'));

}).call(this);

//# sourceMappingURL=data:application/json;base64,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LEVBQUE7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVgsRUFFRSxHQUZGLEVBSGlCO0lBQUEsQ0FKbkI7QUFBQSxJQVdBLE1BQUEsRUFBUSxTQUFBLEdBQUE7YUFDTixLQUFLLENBQUMsYUFBTixDQUFvQixLQUFLLENBQUMsR0FBRyxDQUFDLEdBQTlCLEVBQW1DO0FBQUEsUUFBQyxXQUFBLEVBQWEsWUFBZDtPQUFuQyxFQUNFLEtBQUssQ0FBQyxhQUFOLENBQW9CLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBOUIsRUFBa0MsSUFBbEMsRUFBd0MsYUFBeEMsQ0FERixFQUVFLEtBQUssQ0FBQyxhQUFOLENBQW9CLFdBQXBCLEVBQWlDO0FBQUEsUUFBQyxpQkFBQSxFQUFvQixJQUFDLENBQUEsS0FBSyxDQUFDLFdBQTVCO09BQWpDLENBRkYsRUFHRSxLQUFLLENBQUMsYUFBTixDQUFvQixXQUFwQixFQUFpQyxJQUFqQyxDQUhGLEVBRE07SUFBQSxDQVhSO0dBRlcsQ0F6Q2IsQ0FBQTs7QUFBQSxFQTZEQSxLQUFLLENBQUMsZUFBTixDQUNFLEtBQUssQ0FBQyxhQUFOLENBQW9CLFVBQXBCLEVBQWdDO0FBQUEsSUFBQyxLQUFBLEVBQU8sZUFBUjtHQUFoQyxDQURGLEVBRUUsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsS0FBeEIsQ0FGRixDQTdEQSxDQUFBO0FBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIjIGluZGV4LmNvZmZlXG5jb25zb2xlLmxvZyBcIkhlbGxvIFdvcmxkXCJcblxuIyBIZWxsbyA9IFJlYWN0LmNyZWF0ZUNsYXNzXG4jICAgcmVuZGVyOiAtPlxuIyAgICAgPGgxPkhlbGxvIFdvcmxkPC9oMT5cbiNcbiMgUmVhY3QucmVuZGVyQ29tcG9uZW50IDxIZWxsby8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZScpXG4jXG5cbmNvbW1lbnRzX2pzb25fcmVzcG9uc2UgPSBbXG4gIHthdXRob3I6IFwiRXZhbiBNb3Jpa2F3YVwiLCB0ZXh0OiBcIkNoZWNrIG91dCB0aGlzIFthd2Vzb21lIHNpdGVdKGh0dHA6Ly9pbmJveGFwcC5jb20pXCJ9LFxuICB7YXV0aG9yOiBcIk1pY2hhZWwgR3JpbmljaFwiLCB0ZXh0OiBcIipTd2VldCogc3R1ZmZcIn1cbl1cblxuY29udmVydGVyID0gbmV3IFNob3dkb3duLmNvbnZlcnRlcigpXG5Db21tZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3NcbiAgcmVuZGVyOiAtPlxuICAgIHJhd19wb3N0ID0gY29udmVydGVyLm1ha2VIdG1sIEBwcm9wcy5jaGlsZHJlbi50b1N0cmluZygpXG5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbW1lbnRcIj5cbiAgICAgIDxoMiBjbGFzc05hbWU9XCJjb21tZW50QXV0aG9yXCI+XG4gICAgICAgIHtAcHJvcHMuYXV0aG9yfVxuICAgICAgPC9oMj5cbiAgICAgIDxzcGFuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiByYXdfcG9zdH19IC8+XG4gICAgPC9kaXY+XG5cbkNvbW1lbnRMaXN0ID0gUmVhY3QuY3JlYXRlQ2xhc3NcbiAgcmVuZGVyOiAtPlxuICAgIGNvbW1lbnRfbm9kZXMgPSBAcHJvcHMuZGF0YV9mcm9tX3Byb3BzLm1hcCAoY29tbWVudCkgLT5cbiAgICAgIDxDb21tZW50IGF1dGhvcj17Y29tbWVudC5hdXRob3J9Pntjb21tZW50LnRleHR9PC9Db21tZW50PlxuXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjb21tZW50TGlzdFwiPlxuICAgICAge2NvbW1lbnRfbm9kZXN9XG4gICAgPC9kaXY+XG5cbkNvbW1lbnRGb3JtID0gUmVhY3QuY3JlYXRlQ2xhc3NcbiAgcmVuZGVyOiAtPlxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY29tbWVudEZvcm1cIj5cbiAgICAgIEhlbGxvLCB3b3JsZCEgSSBhbSBhIENvbW1lbnRGb3JtLlxuICAgIDwvZGl2PlxuXG5Db21tZW50Qm94ID0gUmVhY3QuY3JlYXRlQ2xhc3NcblxuICBnZXRJbml0aWFsU3RhdGU6IC0+XG4gICAgbXlfZGF0YV92YXI6IFtdXG5cbiAgIyBDYWxsZWQgYXV0b21hdGljYWxseSBieSBSZWFjdCB3aGVuIHRoaXMgaXMgcmVuZGVyZWRcbiAgY29tcG9uZW50RGlkTW91bnQ6IC0+XG4gICAgIyBzZXRTdGF0ZSB3aWxsIHJlLXJlbmRlciB3aGF0ZXZlciBpcyBuZWVkZWRcbiAgICAjIFRoZXJlIGJlIFwiQUpBWFwiIGhlcmUgYW5kIFwic2VydmVyIGRlbGF5XCJcbiAgICBzZXRUaW1lb3V0ID0+XG4gICAgICBAc2V0U3RhdGUgbXlfZGF0YV92YXI6IGNvbW1lbnRzX2pzb25fcmVzcG9uc2VcbiAgICAsIDUwMFxuXG4gIHJlbmRlcjogLT5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbW1lbnRCb3hcIj5cbiAgICAgIDxoMT5Db21tZW50cyEhITwvaDE+XG4gICAgICA8Q29tbWVudExpc3QgZGF0YV9mcm9tX3Byb3BzPXtAc3RhdGUubXlfZGF0YV92YXJ9IC8+XG4gICAgICA8Q29tbWVudEZvcm0gLz5cbiAgICA8L2Rpdj5cblxuUmVhY3QucmVuZGVyQ29tcG9uZW50KFxuICA8Q29tbWVudEJveCB1cmw9XCJjb21tZW50cy5qc29uXCIvPixcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpXG4pXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
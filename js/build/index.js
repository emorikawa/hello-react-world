(function() {
  var Comment, CommentBox, CommentForm, CommentList, converter;

  console.log("Hello World");

  converter = new Showdown.converter();

  Comment = React.createClass({
    render: function() {
      var raw_post;
      raw_post = converter.makeHtml(this.props.children);
      return React.createElement(React.DOM.div, {
        "className": "comment"
      }, React.createElement(React.DOM.h2, {
        "className": "commentAuthor"
      }, this.props.author), React.createElement(React.DOM.span, {
        "dangerouslySetInnerHTML": {
          __html: raw_post
        }
      }));
    }
  });

  CommentList = React.createClass({
    render: function() {
      return React.createElement(React.DOM.div, {
        "className": "commentList"
      }, "Hello, world! I am a CommentList.", React.createElement(Comment, {
        "author": "Pete Hunt"
      }, "This is [one](http:\x2F\x2Finboxapp.com) comment"), React.createElement(Comment, {
        "author": "Jordan Walke"
      }, "This is *another* comment"));
    }
  });

  CommentForm = React.createClass({
    render: function() {
      return React.createElement(React.DOM.div, {
        "className": "commentForm"
      }, "Hello, world! I am a CommentForm.");
    }
  });

  CommentBox = React.createClass({
    render: function() {
      return React.createElement(React.DOM.div, {
        "className": "commentBox"
      }, React.createElement(React.DOM.h1, null, "Comments!!!"), React.createElement(CommentList, {
        "data": this.props.data
      }), React.createElement(CommentForm, null));
    }
  });

  React.renderComponent(React.createElement(CommentBox, {
    "data": data
  }), document.getElementById('app'));

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QVMsSUFBVjtHQUFoQyxDQUF0QixFQUF5RSxRQUFRLENBQUMsY0FBVCxDQUF3QixLQUF4QixDQUF6RSxDQTFDQSxDQUFBO0FBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIjIGluZGV4LmNvZmZlXG5jb25zb2xlLmxvZyBcIkhlbGxvIFdvcmxkXCJcblxuIyBIZWxsbyA9IFJlYWN0LmNyZWF0ZUNsYXNzXG4jICAgcmVuZGVyOiAtPlxuIyAgICAgPGgxPkhlbGxvIFdvcmxkPC9oMT5cbiNcbiMgUmVhY3QucmVuZGVyQ29tcG9uZW50IDxIZWxsby8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZScpXG4jXG5cbmNvbnZlcnRlciA9IG5ldyBTaG93ZG93bi5jb252ZXJ0ZXIoKVxuQ29tbWVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzXG4gIHJlbmRlcjogLT5cbiAgICByYXdfcG9zdCA9IGNvbnZlcnRlci5tYWtlSHRtbCBAcHJvcHMuY2hpbGRyZW5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbW1lbnRcIj5cbiAgICAgIDxoMiBjbGFzc05hbWU9XCJjb21tZW50QXV0aG9yXCI+XG4gICAgICAgIHtAcHJvcHMuYXV0aG9yfVxuICAgICAgPC9oMj5cbiAgICAgIDxzcGFuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiByYXdfcG9zdH19IC8+XG4gICAgPC9kaXY+XG5cbkNvbW1lbnRMaXN0ID0gUmVhY3QuY3JlYXRlQ2xhc3NcbiAgcmVuZGVyOiAtPlxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY29tbWVudExpc3RcIj5cbiAgICAgIEhlbGxvLCB3b3JsZCEgSSBhbSBhIENvbW1lbnRMaXN0LlxuICAgICAgPENvbW1lbnQgYXV0aG9yPVwiUGV0ZSBIdW50XCI+VGhpcyBpcyBbb25lXShodHRwOi8vaW5ib3hhcHAuY29tKSBjb21tZW50PC9Db21tZW50PlxuICAgICAgPENvbW1lbnQgYXV0aG9yPVwiSm9yZGFuIFdhbGtlXCI+VGhpcyBpcyAqYW5vdGhlciogY29tbWVudDwvQ29tbWVudD5cbiAgICA8L2Rpdj5cblxuQ29tbWVudEZvcm0gPSBSZWFjdC5jcmVhdGVDbGFzc1xuICByZW5kZXI6IC0+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJjb21tZW50Rm9ybVwiPlxuICAgICAgSGVsbG8sIHdvcmxkISBJIGFtIGEgQ29tbWVudEZvcm0uXG4gICAgPC9kaXY+XG5cbkNvbW1lbnRCb3ggPSBSZWFjdC5jcmVhdGVDbGFzc1xuICByZW5kZXI6IC0+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJjb21tZW50Qm94XCI+XG4gICAgICA8aDE+Q29tbWVudHMhISE8L2gxPlxuICAgICAgPENvbW1lbnRMaXN0IGRhdGE9e0Bwcm9wcy5kYXRhfSAvPlxuICAgICAgPENvbW1lbnRGb3JtIC8+XG4gICAgPC9kaXY+XG5cblJlYWN0LnJlbmRlckNvbXBvbmVudCA8Q29tbWVudEJveCBkYXRhPXtkYXRhfS8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJylcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
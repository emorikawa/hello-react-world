(function() {
  var Comment, CommentBox, CommentForm, CommentList, comments_json_response, converter, magical_ajax;

  console.log("Hello World");

  comments_json_response = [
    {
      author: "Evan Morikawa",
      text: "Check out this [awesome site](http://inboxapp.com)"
    }, {
      author: "Michael Grinich",
      text: "*Sweet* stuff"
    }
  ];

  magical_ajax = function(fn) {
    return setTimeout(function() {
      return fn(comments_json_response);
    }, 500);
  };

  converter = new Showdown.converter();

  Comment = React.createClass({
    render: function() {
      var raw_post;
      raw_post = converter.makeHtml(this.props.children.toString());
      return React.createElement(React.DOM.div, {
        "className": "comment"
      }, React.createElement(React.DOM.h2, {
        "className": "commentAuthor"
      }, this.props.author), React.createElement(React.DOM.span, {
        "dangerouslySetInnerHTML": {
          __html: raw_post
        }
      }));
    }
  });

  CommentList = React.createClass({
    render: function() {
      var comment_nodes;
      comment_nodes = this.props.data_from_props.map(function(comment) {
        return React.createElement(Comment, {
          "author": comment.author
        }, comment.text);
      });
      return React.createElement(React.DOM.div, {
        "className": "commentList"
      }, comment_nodes);
    }
  });

  CommentForm = React.createClass({
    _submitHandler: function(e) {
      var c_author, c_text;
      e.preventDefault();
      c_author = this.refs.c_author.getDOMNode().value.trim();
      c_text = this.refs.c_text.getDOMNode().value.trim();
      if ((!c_text) || (!c_author)) {
        return;
      }
      this.props.onCommentSubmit({
        author: c_author,
        text: c_text
      });
      this.refs.c_author.getDOMNode().value = "";
      return this.refs.c_text.getDOMNode().value = "";
    },
    render: function() {
      return React.createElement(React.DOM.form, {
        "className": "commentForm",
        "onSubmit": this._submitHandler
      }, React.createElement(React.DOM.input, {
        "type": "text",
        "placeholder": "Your name",
        "ref": "c_author"
      }), React.createElement(React.DOM.input, {
        "type": "text",
        "placeholder": "Say something...",
        "ref": "c_text"
      }), React.createElement(React.DOM.input, {
        "type": "submit",
        "value": "Post"
      }));
    }
  });

  CommentBox = React.createClass({
    getInitialState: function() {
      return {
        my_data_var: []
      };
    },
    componentDidMount: function() {
      return magical_ajax((function(_this) {
        return function(json_response) {
          return _this.setState({
            my_data_var: json_response
          });
        };
      })(this));
    },
    _handleCommentSubmit: function(comment_data) {
      var data;
      data = this.state.my_data_var;
      data = data.concat([comment_data]);
      return this.setState({
        my_data_var: data
      });
    },
    render: function() {
      return React.createElement(React.DOM.div, {
        "className": "commentBox"
      }, React.createElement(React.DOM.h1, null, "Comments!!!"), React.createElement(CommentList, {
        "data_from_props": this.state.my_data_var
      }), React.createElement(CommentForm, {
        "onCommentSubmit": this._handleCommentSubmit
      }));
    }
  });

  React.renderComponent(React.createElement(CommentBox, {
    "url": "comments.json"
  }), document.getElementById('app'));

}).call(this);

//# sourceMappingURL=data:application/json;base64,
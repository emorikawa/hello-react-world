(function() {
  var Comment, CommentBox, CommentForm, CommentList, converter, data;

  console.log("Hello World");

  data = [
    {
      author: "Evan Morikawa",
      text: "Check out this [awesome site](http://inboxapp.com)"
    }, {
      author: "Michael Grinich",
      text: "*Sweet* stuff"
    }
  ];

  converter = new Showdown.converter();

  Comment = React.createClass({
    render: function() {
      var raw_post;
      raw_post = converter.makeHtml(this.props.children.toString());
      return React.createElement(React.DOM.div, {
        "className": "comment"
      }, React.createElement(React.DOM.h2, {
        "className": "commentAuthor"
      }, this.props.author), React.createElement(React.DOM.span, {
        "dangerouslySetInnerHTML": {
          __html: raw_post
        }
      }));
    }
  });

  CommentList = React.createClass({
    render: function() {
      var comment_nodes;
      comment_nodes = this.props.data.map(function(comment) {
        return React.createElement(Comment, {
          "author": comment.author
        }, comment.text);
      });
      return React.createElement(React.DOM.div, {
        "className": "commentList"
      }, comment_nodes);
    }
  });

  CommentForm = React.createClass({
    render: function() {
      return React.createElement(React.DOM.div, {
        "className": "commentForm"
      }, "Hello, world! I am a CommentForm.");
    }
  });

  CommentBox = React.createClass({
    render: function() {
      return React.createElement(React.DOM.div, {
        "className": "commentBox"
      }, React.createElement(React.DOM.h1, null, "Comments!!!"), React.createElement(CommentList, {
        "data": this.props.data
      }), React.createElement(CommentForm, null));
    }
  });

  React.renderComponent(React.createElement(CommentBox, {
    "data": data
  }), document.getElementById('app'));

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QWlDO0FBQUEsUUFBQyxNQUFBLEVBQVMsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFqQjtPQUFqQyxDQUZGLEVBR0UsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsV0FBcEIsRUFBaUMsSUFBakMsQ0FIRixFQURNO0lBQUEsQ0FBUjtHQURXLENBekNiLENBQUE7O0FBQUEsRUFpREEsS0FBSyxDQUFDLGVBQU4sQ0FDRSxLQUFLLENBQUMsYUFBTixDQUFvQixVQUFwQixFQUFnQztBQUFBLElBQUMsTUFBQSxFQUFTLElBQVY7R0FBaEMsQ0FERixFQUVFLFFBQVEsQ0FBQyxjQUFULENBQXdCLEtBQXhCLENBRkYsQ0FqREEsQ0FBQTtBQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIyBpbmRleC5jb2ZmZVxuY29uc29sZS5sb2cgXCJIZWxsbyBXb3JsZFwiXG5cbiMgSGVsbG8gPSBSZWFjdC5jcmVhdGVDbGFzc1xuIyAgIHJlbmRlcjogLT5cbiMgICAgIDxoMT5IZWxsbyBXb3JsZDwvaDE+XG4jXG4jIFJlYWN0LnJlbmRlckNvbXBvbmVudCA8SGVsbG8vPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGUnKVxuI1xuXG5kYXRhID0gW1xuICB7YXV0aG9yOiBcIkV2YW4gTW9yaWthd2FcIiwgdGV4dDogXCJDaGVjayBvdXQgdGhpcyBbYXdlc29tZSBzaXRlXShodHRwOi8vaW5ib3hhcHAuY29tKVwifSxcbiAge2F1dGhvcjogXCJNaWNoYWVsIEdyaW5pY2hcIiwgdGV4dDogXCIqU3dlZXQqIHN0dWZmXCJ9XG5dXG5cbmNvbnZlcnRlciA9IG5ldyBTaG93ZG93bi5jb252ZXJ0ZXIoKVxuQ29tbWVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzXG4gIHJlbmRlcjogLT5cbiAgICByYXdfcG9zdCA9IGNvbnZlcnRlci5tYWtlSHRtbCBAcHJvcHMuY2hpbGRyZW4udG9TdHJpbmcoKVxuXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjb21tZW50XCI+XG4gICAgICA8aDIgY2xhc3NOYW1lPVwiY29tbWVudEF1dGhvclwiPlxuICAgICAgICB7QHByb3BzLmF1dGhvcn1cbiAgICAgIDwvaDI+XG4gICAgICA8c3BhbiBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogcmF3X3Bvc3R9fSAvPlxuICAgIDwvZGl2PlxuXG5Db21tZW50TGlzdCA9IFJlYWN0LmNyZWF0ZUNsYXNzXG4gIHJlbmRlcjogLT5cbiAgICBjb21tZW50X25vZGVzID0gQHByb3BzLmRhdGEubWFwIChjb21tZW50KSAtPlxuICAgICAgPENvbW1lbnQgYXV0aG9yPXtjb21tZW50LmF1dGhvcn0+e2NvbW1lbnQudGV4dH08L0NvbW1lbnQ+XG5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbW1lbnRMaXN0XCI+XG4gICAgICB7Y29tbWVudF9ub2Rlc31cbiAgICA8L2Rpdj5cblxuQ29tbWVudEZvcm0gPSBSZWFjdC5jcmVhdGVDbGFzc1xuICByZW5kZXI6IC0+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJjb21tZW50Rm9ybVwiPlxuICAgICAgSGVsbG8sIHdvcmxkISBJIGFtIGEgQ29tbWVudEZvcm0uXG4gICAgPC9kaXY+XG5cbkNvbW1lbnRCb3ggPSBSZWFjdC5jcmVhdGVDbGFzc1xuICByZW5kZXI6IC0+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJjb21tZW50Qm94XCI+XG4gICAgICA8aDE+Q29tbWVudHMhISE8L2gxPlxuICAgICAgPENvbW1lbnRMaXN0IGRhdGE9e0Bwcm9wcy5kYXRhfSAvPlxuICAgICAgPENvbW1lbnRGb3JtIC8+XG4gICAgPC9kaXY+XG5cblJlYWN0LnJlbmRlckNvbXBvbmVudChcbiAgPENvbW1lbnRCb3ggZGF0YT17ZGF0YX0vPixcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpXG4pXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=